# -*- coding: utf-8 -*-
"""ODI Cricket Score Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ue12EZeKKjOChA3iYxSgFFJYo4tH409X
"""

import numpy as np
import pandas as pd

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %cd '/content/drive/My Drive/'

df = pd.read_csv('ODI_ball_by_ball_data.csv')
df

df.shape

df.dtypes

df.columns

df.isnull().sum()

df.drop(columns=['season','venue','is_super_over','batter','non_striker','bowler','player_out','wkt_type','fielders_involved','byes'],inplace=True)
df

df.drop(columns=['legbyes','wides', 'noballs','penalty'],inplace = True)

df.isnull().sum()

df['innings'].value_counts()

innings_2nd = df[df['innings'] == 2].index
df = df.drop(innings_2nd, axis=0)

innings_2nd = df[df['innings'] == 3].index
df = df.drop(innings_2nd, axis=0)

innings_2nd = df[df['innings'] == 4].index
df = df.drop(innings_2nd, axis=0)

df

df.drop(columns = ['runs_off_bat','runs_from_extras','innings'],inplace = True)

df['batting_team'].unique()

df['bowling_team'].unique()

teams = [
    'Australia',
    'India',
    'Bangladesh',
    'New Zealand',
    'South Africa',
    'England',
    'West Indies',
    'Afghanistan',
    'Pakistan',
    'Sri Lanka'
]

df = df[df['batting_team'].isin(teams)]
df = df[df['bowling_team'].isin(teams)]

df

total_df = df.groupby('id').sum()['total_runs'].reset_index()
df = df.merge(total_df,on='id')

df

df['current_score'] = df.groupby('id').cumsum()['total_runs_x']

df.rename(columns = {'total_runs_y':'total_score'}, inplace = True)
df

df['wickets'] = df.groupby('id').cumsum()['is_wkt_delivery']

df

groups = df.groupby('id')

match_ids = df['id'].unique()
last_five = []
for id in match_ids:
    last_five.extend(groups.get_group(id).rolling(window=30).sum()['total_runs_x'].values.tolist())

df['runs_last_5'] = last_five
df

df.drop(columns=['total_runs_x','is_wkt_delivery'],inplace=True)

df.drop(columns=['id'],inplace=True)

"""**Removing First 5 Overs of every match**"""

df = df[df['over'] >= 5.0]

df

df['balls_bowled'] = (df['over'].astype('int')*6) + df['ball'].astype('int')

df['crr'] = round((df['current_score']*6)/df['balls_bowled'],2)

df

df.columns

df.drop(columns = ['balls_bowled'],inplace = True)

df.columns

df.shape

from seaborn import heatmap
heatmap(data=df.corr(), annot=True)

"""**Performing Label Encoding**"""

from sklearn.preprocessing import LabelEncoder, OneHotEncoder

from sklearn.compose import ColumnTransformer
columnTransformer = ColumnTransformer([('encoder',
                                        OneHotEncoder(),
                                        [0, 1])],
                                      remainder='passthrough')
df= np.array(columnTransformer.fit_transform(df))

df.shape

cols = ['batting_team_Australia', 'batting_team_India', 'batting_team_Bangladesh',
              'batting_team_New Zealand', 'batting_team_South Africa', 'batting_team_England',
              'batting_team_West Indies', 'batting_team_Afghanistan','batting_team_Pakistan','batting_team_Sri Lanka',

              'bowling_team_Australia', 'bowling_team_India', 'bowling_team_Bangladesh',
              'bowling_team_New Zealand', 'bowling_team_South Africa', 'bowling_team_England',
              'bowling_team_West Indies', 'bowling_team_Afghanistan', 'bowling_team_Pakistan', 'bowling_team_Sri Lanka','over',
        'ball','total_score','current_score', 'wickets', 'runs_last_5', 'crr']
df = pd.DataFrame(df, columns=cols)

df.head()

X = df.drop(['total_score'], axis=1)
y = df['total_score']

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

# Split the data for train and test
X_train,X_test,y_train,y_test = train_test_split(X,y,train_size=0.7,random_state=100)
print(X_train.shape)
print(X_test.shape)

models = dict()

"""**Linear Regression**"""

# Fitting the model
lr_model = LinearRegression()
lr_model.fit(X_train,y_train)

# Predict using test data
y_predict = lr_model.predict(X_test)
y_predict

# Predicted Score of train data
train_accuracy = lr_model.score(X_train, y_train)
train_accuracy

l_test_accuracy = lr_model.score(X_test, y_test)
l_test_accuracy

models["lr_model"] = l_test_accuracy

from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import r2_score

print('Mean absolute error = ', mean_absolute_error(y_test,y_predict))
print('Mean square error = ', mean_squared_error(y_test,y_predict))
print('R2 Score = ', r2_score(y_test,y_predict))

"""**Poly nomial Regression**"""

from sklearn.preprocessing import PolynomialFeatures

poly = PolynomialFeatures(degree =2)
x_train_poly= poly.fit_transform(X_train)
x_test_poly= poly.fit_transform(X_test)

poly = LinearRegression()
poly.fit(x_train_poly, y_train)

predict_train_poly = poly.predict(x_train_poly)
predict_train_poly

predict_test_poly = poly.predict(x_test_poly)
predict_test_poly

train_accuracy = poly.score(x_train_poly, y_train)
train_accuracy

p_test_accuracy = poly.score(x_test_poly, y_test)
p_test_accuracy

models["poly"] =p_test_accuracy

print('Mean absolute error = ', mean_absolute_error( y_test,predict_test_poly))
print('Mean square error = ', mean_squared_error( y_test,predict_test_poly))
print('R2 Score = ', r2_score( y_test,predict_test_poly))

"""**Decision Tree**"""

from sklearn.tree import DecisionTreeRegressor
tree = DecisionTreeRegressor()
# Train Model
tree.fit(X_train,y_train)

# Predict using test data
y_predict = tree.predict(X_test)
y_predict

# Predicted Score of train data
train_accuracy = tree.score(X_train, y_train)
train_accuracy

d_test_accuracy = tree.score(X_test, y_test)
d_test_accuracy

models["tree"] = d_test_accuracy

print('Mean absolute error = ', mean_absolute_error(y_test,y_predict))
print('Mean square error = ', mean_squared_error(y_test,y_predict))
print('R2 Score = ', r2_score(y_test,y_predict))

"""**Random forest**"""

from sklearn.ensemble import RandomForestRegressor
forest = RandomForestRegressor()
# Train Model
forest.fit(X_train,y_train)

# Predict using test data
y_predict = forest.predict(X_test)
y_predict

# Predicted Score of train data
train_accuracy = forest.score(X_train, y_train)
train_accuracy

f_test_accuracy = forest.score(X_test, y_test)
f_test_accuracy

models["forest"] = f_test_accuracy

print('Mean absolute error = ', mean_absolute_error(y_test,y_predict))
print('Mean square error = ', mean_squared_error(y_test,y_predict))
print('R2 Score = ', r2_score(y_test,y_predict))

models.values()

import matplotlib.pyplot as plt
model_names = list(models.keys())
accuracy = list(map(float, models.values()))
# creating the bar plot
plt.bar(model_names, accuracy)

df.columns

df.head()

def score_predict(batting_team, bowling_team,over,ball, current_score, wickets, runs_last_5, crr, model=forest):
  prediction_array = []
  # Batting Team
  if batting_team == 'Australia':
    prediction_array = prediction_array + [1,0,0,0,0,0,0,0,0,0]
  elif batting_team == 'India':
    prediction_array = prediction_array + [0,1,0,0,0,0,0,0,0,0]
  elif batting_team == 'Bangladesh':
    prediction_array = prediction_array + [0,0,1,0,0,0,0,0,0,0]
  elif batting_team == 'New Zealand':
    prediction_array = prediction_array + [0,0,0,1,0,0,0,0,0,0]
  elif batting_team == 'South Africa':
    prediction_array = prediction_array + [0,0,0,0,1,0,0,0,0,0]
  elif batting_team == 'England':
    prediction_array = prediction_array + [0,0,0,0,0,1,0,0,0,0]
  elif batting_team == 'West Indies':
    prediction_array = prediction_array + [0,0,0,0,0,0,1,0,0,0]
  elif batting_team == 'Afghanistan':
    prediction_array = prediction_array + [0,0,0,0,0,0,0,1,0,0]
  elif batting_team == 'Pakistan':
    prediction_array = prediction_array + [0,0,0,0,0,0,0,0,1,0]
  elif batting_team == 'Sri Lanka':
    prediction_array = prediction_array + [0,0,0,0,0,0,0,0,0,1]
  # Bowling Team
  if bowling_team == 'Australia':
    prediction_array = prediction_array + [1,0,0,0,0,0,0,0,0,0]
  elif bowling_team == 'India':
    prediction_array = prediction_array + [0,1,0,0,0,0,0,0,0,0]
  elif bowling_team == 'Bangladesh':
    prediction_array = prediction_array + [0,0,1,0,0,0,0,0,0,0]
  elif bowling_team == 'New Zealand':
    prediction_array = prediction_array + [0,0,0,1,0,0,0,0,0,0]
  elif bowling_team == 'South Africa':
    prediction_array = prediction_array + [0,0,0,0,1,0,0,0,0,0]
  elif bowling_team == 'England':
    prediction_array = prediction_array + [0,0,0,0,0,1,0,0,0,0]
  elif bowling_team == 'West Indies':
    prediction_array = prediction_array + [0,0,0,0,0,0,1,0,0,0]
  elif bowling_team == 'Afghanistan':
    prediction_array = prediction_array + [0,0,0,0,0,0,0,1,0,0]
  elif bowling_team == 'Pakistan':
    prediction_array = prediction_array + [0,0,0,0,0,0,0,0,1,0]
  elif bowling_team == 'Sri Lanka':
    prediction_array = prediction_array + [0,0,0,0,0,0,0,0,0,1]
  prediction_array = prediction_array + [over,ball, current_score, wickets, runs_last_5, crr]
  prediction_array = np.array([prediction_array])
  pred = model.predict(prediction_array)
  return int(round(pred[0]))

"""Australia vs South Africa (4 sep 2023)"""

batting_team='South Africa'
bowling_team='Australia'
score = score_predict(batting_team, bowling_team, over=25, ball=1,current_score=174, wickets=4, runs_last_5=30, crr=6.96)
print(f'Predicted Score : {score} || Actual Score : 269')

"""Sri Lanka vs Bangladesh (9 sep 2023)"""

batting_team='Bangladesh'
bowling_team='Sri Lanka'
score = score_predict(batting_team, bowling_team, over=19, ball=1,current_score=84, wickets=4, runs_last_5=24, crr=4.42)
print(f'Predicted Score : {score} || Actual Score : 236')

"""Pakistan Vs India (11 sep 2023)"""

batting_team='Pakistan'
bowling_team='India'
score = score_predict(batting_team, bowling_team, over=11, ball=1,current_score=44, wickets=2, runs_last_5=24, crr=4.0)
print(f'Predicted Score : {score} || Actual Score : 128')

batting_team='India'
bowling_team='Sri Lanka'
score = score_predict(batting_team, bowling_team, over=38, ball=5,current_score=178, wickets=7, runs_last_5=8, crr=4.58)
print(f'Predicted Score : {score} || Actual Score : 213')

batting_team='South Africa'
bowling_team='Australia'
score = score_predict(batting_team, bowling_team, over=18, ball=3,current_score=117, wickets=0, runs_last_5=33, crr=6.32)
print(f'Predicted Score : {score} || Actual Score : 338')

batting_team='Australia'
bowling_team='South Africa'
score = score_predict(batting_team, bowling_team, over=24, ball=6,current_score=183, wickets=5, runs_last_5=23, crr=7.32)
print(f'Predicted Score : {score} || Actual Score : 227')

"""Asia Cup Final 2018

Final
"""

batting_team='India'
bowling_team='Bangladesh'
score = score_predict(batting_team, bowling_team, over=40, ball=3,current_score=173, wickets=5, runs_last_5=15, crr=4.30)
print(f'Predicted Score : {score} || Actual Score : 223')

"""26 sep 2018"""

batting_team='Pakistan'
bowling_team='Bangladesh'
score = score_predict(batting_team, bowling_team, over=26, ball=2,current_score=96, wickets=5, runs_last_5=9, crr=3.69)
print(f'Predicted Score : {score} || Actual Score : 202')

batting_team='Afghanistan'
bowling_team='Bangladesh'
score = score_predict(batting_team, bowling_team, over=35, ball=1,current_score=137, wickets=3, runs_last_5=27, crr=3.91)
print(f'Predicted Score : {score} || Actual Score : 246')